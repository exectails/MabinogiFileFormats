//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: .inc.bt
//   Authors: exec
//   Version: 1
//   Purpose: Common structs used in templates.
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Bool
//------------------------------------------------
typedef struct
{
    ubyte val;
}
Bool <optimize=false, read=readBool>;

string readBool(Bool &v)
{
    if (v.val != 0)
        return "true";
    else
        return "false";
}

// Vector3F
//------------------------------------------------
typedef struct
{
    float x;
    float y;
    float z;
}
Vector3F_XYZ <optimize=false, read=readVector3F_XYZ>;

typedef struct
{
    float x;
    float z;
    float y;
}
Vector3F_XZY <optimize=false, read=readVector3F_XZY>;

string readVector3F_XYZ(Vector3F_XYZ &v)
{
    local string result;
    SPrintf(result, "X: %.2f, Y: %.2f, Z: %.2f", v.x, v.y, v.z);
    return result;
}

string readVector3F_XZY(Vector3F_XZY &v)
{
    local string result;
    SPrintf(result, "X: %.2f, Y: %.2f, Z: %.2f", v.x, v.y, v.z);
    return result;
}

// Vector2
//------------------------------------------------
typedef struct
{
    int x;
    int y;
}
Vector2 <optimize=false, read=readVector2>;

string readVector2(Vector2 &v)
{
    local string result;
    SPrintf(result, "X: %d, Y: %d", v.x, v.y);
    return result;
}

// Vector2F
//------------------------------------------------
typedef struct
{
    float x;
    float y;
}
Vector2F <optimize=false, read=readVector2F>;

string readVector2F(Vector2F &v)
{
    local string result;
    SPrintf(result, "X: %.2f, Y: %.2f", v.x, v.y);
    return result;
}

// Color
//------------------------------------------------
typedef struct
{
    ubyte b;
    ubyte g;
    ubyte r;
    ubyte a;
}
Color <optimize=false, read=readColor>;

string readColor(Color &v)
{
    local string result;
    SPrintf(result, "#%02X%02X%02X%02X", v.a, v.r, v.g, v.b);
    return result;
}

// WString
//------------------------------------------------
typedef struct
{
    wstring str;
}
WString <optimize=false, read=readWString>;

string readWString(WString &v)
{
    return v.str;
}

// LpWString
//------------------------------------------------
typedef struct
{
    int length;
    if (length > 0)
        wchar_t str[length];
}
LpWString <optimize=false, read=readLpWString>;

string readLpWString(LpWString &v)
{
    if (v.length == 0)
        return "";
    
    return v.str;
}

// LpString
//------------------------------------------------
typedef struct
{
    int length;
    if (length > 0)
        char str[length];
}
LpString <optimize=false, read=readLpString>;

string readLpString(LpString &v)
{
    if (v.length == 0)
        return "";
    
    return v.str;
}

// LpXString
//------------------------------------------------
typedef struct
{
    byte isNull;
    if (!isNull)
    {
        byte isUnicode;
        short length;
        if (length > 0)
        {
            if (isUnicode)
                wchar_t str[length];
            else
                char str[length];
        }
    }
}
LpXString <optimize=false, read=readLpXString>;

string readLpXString(LpXString &v)
{
    if (v.isNull)
        return "NULL";

    if (v.length == 0)
        return "";
    
    return v.str;
}

// EntityId
//------------------------------------------------
typedef struct
{
    int64 val;
}
EntityId <optimize=false, read=readEntityId>;

string readEntityId(EntityId &v)
{
    string s;
    SPrintf(s, "%08X%08X", v.val >> 32, v.val);
    return s;
}

// FormatVersion
//------------------------------------------------
typedef struct
{
    BigEndian();

    local int index = FTell();
    byte major;
    byte minor;
    FSeek(index);
    short value;

    LittleEndian();
}
FormatVersion <read=readFormatVersion>;

string readFormatVersion(FormatVersion &version)
{
    local string result;
    SPrintf(result, "%d.%d", version.major, version.minor);
    return result;
}

// Quaternion
//------------------------------------------------
typedef struct
{
    float q01;
    float q02;
    float q03;
    float q04;
}
Quaternion;

// Matrix
//------------------------------------------------
typedef struct
{
    float m01;
    float m02;
    float m03;
    float m04;
    float m05;
    float m06;
    float m07;
    float m08;
    float m09;
    float m10;
    float m11;
    float m12;
    float m13;
    float m14;
    float m15;
    float m16;
}
Matrix;
