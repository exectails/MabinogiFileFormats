//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: set.bt
//   Authors: exec, Tachiorz
//   Version: 1
//   Purpose: 
//  Category: 
// File Mask: *.set
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "inc/common.bt"
#include "inc/frm.bt"
#include "inc/ani.bt"

typedef struct
{
    int size;
    char meshName[128];
    char colorName[32];
    char jointName[32];
    byte unk1[12];
}
MeshState <optimize=false>;

typedef struct
{
    wstring state;

    short count;
    if (count > 0)
        MeshState states[count];
}
MeshStateCollection <optimize=false>;

typedef struct
{
    int i7;
    int size;

    Vector3F_XYZ pos;
    Vector3F_XYZ dir1;
    Vector3F_XYZ dir2;
    Vector3F_XYZ dir3;
    Vector3F_XYZ halfSize;

    byte collide;
    byte floor;
    byte b1;
}
CollisionMeshState <optimize=false>;

typedef struct
{
    wstring state;

    int count;
    if (count > 0)
        CollisionMeshState states[count];
}
CollisionMeshStateCollection <optimize=false>;

typedef struct
{
    char signature[4];
    short s1;
    int size;
    char parentName[36];
    char position[64];
    Vector3F_XYZ vec1;
    Vector3F_XYZ vec2;
}
LightState <optimize=false>;

typedef struct
{
    wstring state;

    int count;
    if (count > 0)
        LightState states[count];
}
LightStateCollection <optimize=false>;

typedef struct
{
    Vector3F_XYZ vec1;
    int i4;
}
FloorMeshVertex;

typedef struct
{
    Vector3F_XYZ vec1;
    float f4;
}
FloorMeshUnk1;

typedef struct
{
    wstring stateName;
    int vertexCount;
    int indexCount;
    int unkCount1;
    
    FloorMeshVertex vertices[vertexCount];
    short indices[indexCount];
    FloorMeshUnk1 unk1s[unkCount1];
}
FloorMeshState <optimize=false>;

typedef struct
{
    LpXString cameraName;
    LpXString boneName;
    int i2;
    Vector3F_XYZ vec1;
    int i3;
    Vector3F_XYZ vec2;
}
CameraState <optimize=false>;

typedef struct
{
    wstring state;

    int count;
    if (count > 0)
        CameraState states[count];
}
CameraStateCollection <optimize=false>;

typedef struct
{
    int type;

    switch(type)
    {
        case 2:
        {
            MeshStateCollection collection;
            break;
        }
        
        case 3:
        {
            CollisionMeshStateCollection collection;
            break;
        }
        
        case 4:
        {
            LightStateCollection collection;
            break;
        }
        
        case 5:
        {
            CameraStateCollection collection;
            break;
        }
        
        case 6:
        {
            FloorMeshState collection;
            break;
        }
        
        default:
        {
            Printf("ERROR: Unsupported set state (%d).\n", type);
            return;
        }
    }
}
SetStateItem <optimize=false, read=readSetStateItem>;

typedef struct
{
    int count;
    if (count > 0)
        SetStateItem items[count];
}
SetState <optimize=false>; //, read=readSetState>;

string readSetStateItem(SetStateItem& v)
{
    local string stateName;
    switch(v.type)
    {
        case 0: stateName = "FrameworkState"; break;
        case 1: stateName = "AnimationState"; break;
        case 2: stateName = "MeshState"; break;
        case 3: stateName = "CollisionmeshState"; break;
        case 4: stateName = "LightState"; break;
        case 5: stateName = "CameraState"; break;
        case 6: stateName = "FloormeshState"; break;
        default: stateName = "Unknown"; break;
    }

    local string result;
    SPrintf(result, "%s (%d)", stateName, v.type);
    return result;
}

typedef struct
{
    int type; // 1000 = pf, 1001 = pa, ?
    int size;
    wstring fileName;
    wstring stateName;

    if (type == 1000)
    {
        Frm frm;
    }
    else if (type == 1001)
    {
        Ani ani;
    }
    else
    {
        byte unk3[size];
    }
}
SetItem <optimize=false, read=readSetItem>;

string readSetItem(SetItem& v)
{
    local string type;
    if (v.type == 1000)
        SPrintf(type, "%s", "pf!");
    else if (v.type == 1001)
        SPrintf(type, "%s", "pa!");
    else
        SPrintf(type, "%d", v.type);

    local string result;
    SPrintf(result, "%s :: %s :: %s", v.fileName, v.stateName, type);
    return result;
}

typedef struct
{
    char signature[4];
    FormatVersion version;

    int size;
    byte b1;

    SetState states[5];
}
Header;

typedef struct
{
    Header header;

    int itemCount;
    if (itemCount > 0)
        SetItem items[itemCount];
}
Set <optimize=false>;

Set set;

if (!FEof())
    Printf("WARNING: Leftovers");
