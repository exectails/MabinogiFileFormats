//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: area.bt
//   Authors: exec, Tachiorz, Yiting
//   Version: 1
//   Purpose: Mabinogi's .area file format.
//  Category: 
// File Mask: *.area
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "inc/common.bt"

local int _version;

// The modern shape has a center position around
// which a rectangle with width lenX and height
// lenY is build. The dir values define the angle.
typedef struct
{
    float dirX1;
    float dirX2;
    float dirY1;
    float dirY2;
    float lenX;
    float lenY;
    int type;
    Vector2F position;
    Vector2F bottomLeft;
    Vector2F topRight;
}
Shape;

// The shapes used in Mabinogi KR's beta client consist
// of points that make up a potentially polygonal,
// though usually rectangular, shape.
typedef struct
{
    byte pointCount; // ?
    Vector2F point1;
    Vector2F point2;
    Vector2F point3;
    Vector2F point4;
    Vector2F point5; // same as point1, connecting back to first?
    int type;
    Vector2F center;
    Vector2F bottomLeft;
    Vector2F topRight;
}
PointShape;

void Shapes(int count)
{
    if (count == 0)
        return;

    if (_version > 200)
        Shape shapes[count];
    else
    {
        PointShape shapes[count];
    }
}

typedef struct
{
    Bool isDefault;
    int parameterType;
    int signalType;
    WString name;
    WString xml;

    // Known parameter types:
    //  Warp = 100,
    //  BgmChangeLoop = 201,
    //  BgmStop = 202,
    //  BgmChangeNoLoop = 211,
    //  Notice = 300,
    //  Confirmation = 1100,
    //  CommerceSafeZone = 1401,
    //  ServerScript = 2000,
    //  DropGroupItem = 2200,
    //  CreatureSpawner = 2500,
    //  Altar = 2110,
    //  SaveTown = 2610,
    //  SaveDungeon = 2620,
    //  RestrictedArea = 2901,

    // Known signal types:
    //  OnEnter = 101,
    //  OnLeave = 102,
    //  OnStepOn = 103,
    //  Respawn = 150,
    //  OnHit = 201,
    //  OnTouch = 202,
}
EntityParameter <optimize=false>;

typedef struct
{
    if (_version > 200)
        int propId;

    EntityId entityId;
    WString name;
    Vector3F_XYZ position;
    byte shapeCount;
    int shapeType;

    if (_version == 200)
    {
        Shapes(shapeCount);
        byte unk1;
        int propId;
    }
    else
    {
        Shapes(shapeCount);
        Bool isCollision;
        Bool fixedAltitude;
    }

    float scale;
    float rotation; // radians

    if (_version > 200)
    {
        Vector3F_XZY bottomLeft;
        Vector3F_XZY topRight;
    }

    Color colorOverride;
    Color colors[9];

    if (_version > 200)
        WString title;

    WString state;
    byte parameterCount;
    if (parameterCount > 0)
        EntityParameter parameters[parameterCount];
}
Prop <optimize=false>;

typedef struct
{
    EntityId entityId;
    WString name;
    Vector3F_XYZ position;
    byte shapeCount;
    int shapeType;
    Shapes(shapeCount);
    int eventType;
    byte parameterCount;
    if (parameterCount > 0)
        EntityParameter parameters[parameterCount];
    
    // Known event types:
    //  General = 0,
    //  Portal = 1,
    //  AreaChange = 10,
    //  Unk11 = 11,
    //  DungeonLobby = 12,
    //  SpawnPoint = 13,
    //  Collision = 14,
    //  Unk100 = 100,
    //  SpawnArea = 2000,
    //  Street = 3000,
    //  FishingGrounds = 3100,
}
Event <optimize=false>;

typedef struct
{
    float height;
    float unk1;
    float unk2;
    Color vertexColor;
}
Plane;

typedef struct
{ // second byte not used if useTiles == 0
    byte square0_rot0[2];
    byte square0_rot270[2];
    byte square1_rot0[2];
    byte square1_rot270[2];
    byte square2_rot0[2];
    byte square2_rot270[2];
    byte square3_rot0[2];
    byte square3_rot270[2];

    byte square0_rot90[2];
    byte square0_rot180[2];
    byte square1_rot90[2];
    byte square1_rot180[2];
    byte square2_rot90[2];
    byte square2_rot180[2];
    byte square3_rot90[2];
    byte square3_rot180[2];
}
Square;

// The AreaPlanes appear to be planes with a number of vertices, with their,
// heights found in the Planes.
typedef struct
{
    unsigned byte version;

    if (version >= 240)
    {
        byte unk1;
        byte unk2;
        byte unk3;
        byte unk4;
    }

    byte size;
    
    // They upgraded to int, because they ran out of
    // ids for the tiles when they reached tile 255.
    if (version >= 240)
        int materialSlots[4];
    else
        byte materialSlots[4];

    byte showPlane;
    byte useTiles; // 1: Custom, 0: Auto
    unsigned byte materialSlotIndexes[16]; // not used if useTiles == 0
    float minHeight;
    float maxHeight;

    if (version == 1 || version == 241)
    {
        float unk5;
        float unk6;
    }

    local int planeCount = (size * size);
    if (planeCount > 0)
        Plane planes[planeCount];

    Square squares[4];
}
AreaPlane <optimize=false>;

typedef struct
{
    float height;
    Color unk2;
}
LegacyPlane;

typedef struct
{
    byte size;
    byte materialSlots[4];
    byte showPlane;
    unsigned byte useTiles;
    unsigned byte materialSlotIndexes[16];
    float minHeight;
    float maxHeight;

    local int planeCount = (size * size);
    if (showPlane)
        planeCount++;

    if (planeCount > 0)
        LegacyPlane planes[planeCount];
    Square squares[4];
}
LegacyAreaPlane <optimize=false>;

short version;
_version = version;

short unk8;
int length;
ushort areaId;
ushort regionId;
WString serverName;
WString areaName;
int planeCountX;
int planeCountY;
int unk1;
int unk2;
int eventCount;
int propCount;
float unk3;
float unk4;
int unk5;
int unk6;
int currentEventEntityId;
Vector3F_XZY bottomLeft;
Vector3F_XZY bottomRight;
Vector3F_XZY topRight;
Vector3F_XZY topLeft;

if (version == 203)
    int unk9;

int version2;
int propCount2;

if (propCount2 > 0)
    Prop props[propCount2];
if (eventCount > 0)
    Event events[eventCount];

// The terrain was slightly different in version 200 as well,
// more research will be needed. It seems similar though.

if (version == 200)
{
    local int areaPlaneCount = (planeCountX * planeCountY);
    LegacyAreaPlane areaPlanes[areaPlaneCount];
}
else
{
    local int areaPlaneCount = (planeCountX * planeCountY);
    AreaPlane areaPlanes[areaPlaneCount];
}

// Usually 65|68 bytes follow the planes, purpose unknown
// and why they appear hasn't been researched yet, neither
// why the lengths differ.

local int64 rest = (FileSize() - FTell());
if (rest > 0)
    byte unk10[rest];
